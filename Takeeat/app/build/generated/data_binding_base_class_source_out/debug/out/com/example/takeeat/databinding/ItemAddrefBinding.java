// Generated by view binder compiler. Do not edit!
package com.example.takeeat.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.takeeat.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAddrefBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Spinner addAddrefUnitSpinner;

  @NonNull
  public final TextView addrefEXPText;

  @NonNull
  public final EditText addrefEditItemName;

  @NonNull
  public final Button addrefTagButton;

  @NonNull
  public final EditText editItemAmount;

  @NonNull
  public final View refDetailDivider;

  private ItemAddrefBinding(@NonNull ConstraintLayout rootView,
      @NonNull Spinner addAddrefUnitSpinner, @NonNull TextView addrefEXPText,
      @NonNull EditText addrefEditItemName, @NonNull Button addrefTagButton,
      @NonNull EditText editItemAmount, @NonNull View refDetailDivider) {
    this.rootView = rootView;
    this.addAddrefUnitSpinner = addAddrefUnitSpinner;
    this.addrefEXPText = addrefEXPText;
    this.addrefEditItemName = addrefEditItemName;
    this.addrefTagButton = addrefTagButton;
    this.editItemAmount = editItemAmount;
    this.refDetailDivider = refDetailDivider;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAddrefBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAddrefBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_addref, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAddrefBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_addref_UnitSpinner;
      Spinner addAddrefUnitSpinner = ViewBindings.findChildViewById(rootView, id);
      if (addAddrefUnitSpinner == null) {
        break missingId;
      }

      id = R.id.addref_EXPText;
      TextView addrefEXPText = ViewBindings.findChildViewById(rootView, id);
      if (addrefEXPText == null) {
        break missingId;
      }

      id = R.id.addref_EditItemName;
      EditText addrefEditItemName = ViewBindings.findChildViewById(rootView, id);
      if (addrefEditItemName == null) {
        break missingId;
      }

      id = R.id.addref_TagButton;
      Button addrefTagButton = ViewBindings.findChildViewById(rootView, id);
      if (addrefTagButton == null) {
        break missingId;
      }

      id = R.id.editItemAmount;
      EditText editItemAmount = ViewBindings.findChildViewById(rootView, id);
      if (editItemAmount == null) {
        break missingId;
      }

      id = R.id.refDetail_Divider;
      View refDetailDivider = ViewBindings.findChildViewById(rootView, id);
      if (refDetailDivider == null) {
        break missingId;
      }

      return new ItemAddrefBinding((ConstraintLayout) rootView, addAddrefUnitSpinner, addrefEXPText,
          addrefEditItemName, addrefTagButton, editItemAmount, refDetailDivider);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
